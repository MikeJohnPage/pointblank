% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/create_multiagent.R
\name{create_multiagent}
\alias{create_multiagent}
\title{Create a \strong{pointblank} \emph{multiagent} object}
\usage{
create_multiagent(..., lang = NULL, locale = NULL)
}
\arguments{
\item{...}{One or more \strong{pointblank} agent objects.}

\item{lang}{The language to use for any reporting that will be generated from
the \emph{multiagent}. (e.g., individual \emph{agent reports}, \emph{multiagent reports},
etc.). By default, \code{NULL} will create English (\code{"en"}) text. Other options
include French (\code{"fr"}), German (\code{"de"}), Italian (\code{"it"}), Spanish
(\code{"es"}), Portuguese (\code{"pt"}), Turkish (\code{"tr"}), Chinese (\code{"zh"}), Russian
(\code{"ru"}), Polish (\code{"pl"}), Danish (\code{"da"}), Swedish (\code{"sv"}), and Dutch
(\code{"nl"}).}

\item{locale}{An optional locale ID to use for formatting values in the
reporting outputs according the locale's rules. Examples include \code{"en_US"}
for English (United States) and \code{"fr_FR"} for French (France); more simply,
this can be a language identifier without a country designation, like "es"
for Spanish (Spain, same as \code{"es_ES"}).}
}
\value{
A \code{ptblank_multiagent} object.
}
\description{
Multiple \emph{agents} can be part of a single object called the \emph{multiagent}.
This can be useful when gathering multiple agents that have performed
interrogations in the past (perhaps saved to disk with \code{\link[=x_write_disk]{x_write_disk()}}).
When be part of a \emph{multiagent}, we can get a report that shows how data
quality evolved over time. This can be of interest when it's important to
monitor data quality and even the evolution of the validation plan itself.
The reporting table, generated by printing a \code{ptblank_multiagent} object or
by using the \code{\link[=get_multiagent_report]{get_multiagent_report()}} function, is, by default, organized by
the interrogation time and it automatically recognizes which validation steps
are equivalent across interrogations.
}
\section{Demos}{


Let's walk through several theoretical data quality analyses of an extremely
small table. that table is called \code{small_table} and we can find it as a
dataset in this package.\if{html}{\out{<div class="sourceCode r">}}\preformatted{small_table
}\if{html}{\out{</div>}}\preformatted{## # A tibble: 13 Ã— 8
##    date_time           date           a b             c      d e     f    
##    <dttm>              <date>     <int> <chr>     <dbl>  <dbl> <lgl> <chr>
##  1 2016-01-04 11:00:00 2016-01-04     2 1-bcd-345     3  3423. TRUE  high 
##  2 2016-01-04 00:32:00 2016-01-04     3 5-egh-163     8 10000. TRUE  low  
##  3 2016-01-05 13:32:00 2016-01-05     6 8-kdg-938     3  2343. TRUE  high 
##  4 2016-01-06 17:23:00 2016-01-06     2 5-jdo-903    NA  3892. FALSE mid  
##  5 2016-01-09 12:36:00 2016-01-09     8 3-ldm-038     7   284. TRUE  low  
##  6 2016-01-11 06:15:00 2016-01-11     4 2-dhe-923     4  3291. TRUE  mid  
##  7 2016-01-15 18:46:00 2016-01-15     7 1-knw-093     3   843. TRUE  high 
##  8 2016-01-17 11:27:00 2016-01-17     4 5-boe-639     2  1036. FALSE low  
##  9 2016-01-20 04:30:00 2016-01-20     3 5-bce-642     9   838. FALSE high 
## 10 2016-01-20 04:30:00 2016-01-20     3 5-bce-642     9   838. FALSE high 
## 11 2016-01-26 20:07:00 2016-01-26     4 2-dmx-010     7   834. TRUE  low  
## 12 2016-01-28 02:51:00 2016-01-28     2 7-dmx-010     8   108. FALSE low  
## 13 2016-01-30 11:23:00 2016-01-30     1 3-dka-303    NA  2230. TRUE  high
}

To set failure limits and signal conditions, we designate proportional
failure thresholds to the \code{warn}, \code{stop}, and \code{notify} states using
\code{action_levels()}.\if{html}{\out{<div class="sourceCode r">}}\preformatted{al <- 
  action_levels(
    warn_at = 0.05,
    stop_at = 0.10,
    notify_at = 0.20
  )
}\if{html}{\out{</div>}}

We will create four different agents and have slightly different validation
steps in each of them. In the first, \code{agent_1}, eight different validation
steps are created and the agent will interrogate the \code{small_table}.\if{html}{\out{<div class="sourceCode r">}}\preformatted{agent_1 <-
  create_agent(
    tbl = small_table,
    label = "An example.",
    actions = al
  ) \%>\%
  col_vals_gt(
    vars(date_time),
    value = vars(date),
    na_pass = TRUE
  ) \%>\%
  col_vals_gt(
    vars(b), 
    value = vars(g),
    na_pass = TRUE
  ) \%>\%
  rows_distinct() \%>\%
  col_vals_equal(
    vars(d), 
    value = vars(d),
    na_pass = TRUE
  ) \%>\%
  col_vals_between(
    vars(c), 
    left = vars(a), right = vars(d)
  ) \%>\%
  col_vals_not_between(
    vars(c),
    left = 10, right = 20,
    na_pass = TRUE
  ) \%>\%
  rows_distinct(vars(d, e, f)) \%>\%
  col_is_integer(vars(a)) \%>\%
  interrogate()
}\if{html}{\out{</div>}}

The second agent, \code{agent_2}, retains all of the steps of \code{agent_1} and adds
two more (the last of which is inactive).\if{html}{\out{<div class="sourceCode r">}}\preformatted{agent_2 <- 
  agent_1 \%>\%
  col_exists(vars(date, date_time)) \%>\%
  col_vals_regex(
    vars(b), 
    regex = "[0-9]-[a-z]\{3\}-[0-9]\{3\}",
    active = FALSE
  ) \%>\%
  interrogate()
}\if{html}{\out{</div>}}

The third agent, \code{agent_3}, adds a single validation step, removes the fifth
one, and deactivates the first.\if{html}{\out{<div class="sourceCode r">}}\preformatted{agent_3 <- 
  agent_2 \%>\%
  col_vals_in_set(
    vars(f),
    set = c("low", "mid", "high")
  ) \%>\%
  remove_steps(i = 5) \%>\%
  deactivate_steps(i = 1) \%>\%
  interrogate()
}\if{html}{\out{</div>}}

The fourth and final agent, \code{agent_4}, reactivates steps 1 and 10, and
removes the sixth step.\if{html}{\out{<div class="sourceCode r">}}\preformatted{agent_4 <-
  agent_3 \%>\%
  activate_steps(i = 1) \%>\%
  activate_steps(i = 10) \%>\%
  remove_steps(i = 6) \%>\%
  interrogate()
}\if{html}{\out{</div>}}

While all the agents are slightly different from each other, we can still get
a combined report of them by creating a 'multiagent'.\if{html}{\out{<div class="sourceCode r">}}\preformatted{multiagent <-
  create_multiagent(
    agent_1, agent_2, agent_3, agent_4
  )
}\if{html}{\out{</div>}}

Calling \code{multiagent} in the console prints the multiagent report. But we can
get a \code{gt_tbl} object with the \code{get_multiagent_report()} function.\if{html}{\out{<div class="sourceCode r">}}\preformatted{report <- get_multiagent_report(multiagent)
}\if{html}{\out{</div>}}\if{html}{\out{<div class="sourceCode r">}}\preformatted{class(report)
}\if{html}{\out{</div>}}\preformatted{## [1] "ptblank_multiagent_report.long" "shiny.tag.list"                
## [3] "list"
}
}

\section{Figures}{

\if{html}{\figure{man_create_multiagent_1.png}{options: width=100\%}}
}

\section{Function ID}{

10-1
}

\seealso{
Other The multiagent: 
\code{\link{get_multiagent_report}()},
\code{\link{read_disk_multiagent}()}
}
\concept{The multiagent}
