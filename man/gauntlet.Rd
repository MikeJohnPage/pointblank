% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/gauntlet.R
\name{gauntlet}
\alias{gauntlet}
\title{Run the gauntlet with a series of validation functions}
\usage{
gauntlet(
  x,
  ...,
  .list = list2(...),
  preconditions = NULL,
  actions = NULL,
  step_id = NULL,
  label = NULL,
  brief = NULL,
  active = TRUE
)
}
\arguments{
\item{x}{A data frame, tibble (\code{tbl_df} or \code{tbl_dbi}), Spark DataFrame
(\code{tbl_spark}), or, an \emph{agent} object of class \code{ptblank_agent} that is
created with \code{\link[=create_agent]{create_agent()}}.}

\item{...}{a collection one-sided formulas that consist of \verb{test_*()}
function calls (e.g., \code{\link[=test_col_vals_between]{test_col_vals_between()}}, etc.) arranged in sequence
of intended interrogation order. Typically, validations up until
the final one would have some \code{threshold} value set (default is \code{1}) for
short circuiting within the gauntlet. A finishing validation function
call (e.g., \code{\link[=col_vals_increasing]{col_vals_increasing()}}, etc.) can optionally be inserted at
the end of the gauntlet, serving as the main validation step that only
undergoes interrogation if prior steps adequately pass. An example of this
is \verb{~ test_column_exists(., vars(a)), ~ col_vals_not_null(., vars(a))}).}

\item{.list}{Allows for the use of a list as an input alternative to \code{...}.}

\item{preconditions}{An optional expression for mutating the input table
before proceeding with the validation. This can either be provided as a
one-sided R formula using a leading \code{~} (e.g.,
\code{~ . \%>\% dplyr::mutate(col = col + 10)} or as a function (e.g.,
\code{function(x) dplyr::mutate(x, col = col + 10)}. See the \emph{Preconditions}
section for more information.}

\item{actions}{A list containing threshold levels so that the validation step
can react accordingly when exceeding the set levels. This is to be created
with the \code{\link[=action_levels]{action_levels()}} helper function.}

\item{step_id}{One or more optional identifiers for the single or multiple
validation steps generated from calling a validation function. The use of
step IDs serves to distinguish validation steps from each other and provide
an opportunity for supplying a more meaningful label compared to the step
index. By default this is \code{NULL}, and \strong{pointblank} will automatically
generate the step ID value (based on the step index) in this case. One or
more values can be provided, and the exact number of ID values should (1)
match the number of validation steps that the validation function call will
produce (influenced by the number of \code{columns} provided), (2) be an ID
string not used in any previous validation step, and (3) be a vector with
unique values.}

\item{label}{An optional label for the validation step. This label appears in
the \emph{agent} report and for the best appearance it should be kept short.}

\item{brief}{An optional, text-based description for the validation step. If
nothing is provided here then an \emph{autobrief} is generated by the \emph{agent},
using the language provided in \code{\link[=create_agent]{create_agent()}}'s \code{lang} argument (which
defaults to \code{"en"} or English). The \emph{autobrief} incorporates details of the
validation step so it's often the preferred option in most cases (where a
\code{label} might be better suited to succinctly describe the validation).}

\item{active}{A logical value indicating whether the validation step should
be active. If the validation function is working with an \emph{agent}, \code{FALSE}
will make the validation step inactive (still reporting its presence and
keeping indexes for the steps unchanged). If the validation function will
be operating directly on data (no \emph{agent} involvement), then any step with
\code{active = FALSE} will simply pass the data through with no validation
whatsoever. Aside from a logical vector, a one-sided R formula using a
leading \code{~} can be used with \code{.} (serving as the input data table) to
evaluate to a single logical value. With this approach, the \strong{pointblank}
function \code{\link[=has_columns]{has_columns()}} can be used to determine whether to make a
validation step active on the basis of one or more columns existing in the
table (e.g., \code{~ . \%>\% has_columns(vars(d, e))}). The default for \code{active}
is \code{TRUE}.}
}
\value{
For the validation function, the return value is either a
\code{ptblank_agent} object or a table object (depending on whether an agent
object or a table was passed to \code{x}). The expectation function invisibly
returns its input but, in the context of testing data, the function is
called primarily for its potential side-effects (e.g., signaling failure).
The test function returns a logical value.
}
\description{
The \code{gauntlet()} validation function runs validation step in sequence,
providing an opportunity to exit the validation pathway at any step where
test units fail beyond a set \emph{stop} threshold.

In practice, an example of where a \code{gauntlet()} ensemble validation is useful
is when subsequent steps would fail if prior steps didn't pass to a known
degree.
}
\section{Column Names}{

If providing multiple column names in any of the supplied validation steps,
the result will be an expansion of sub-validation steps to that number of
column names. Aside from column names in quotes and in \code{vars()},
\strong{tidyselect} helper functions are available for specifying columns. They
are: \code{starts_with()}, \code{ends_with()}, \code{contains()}, \code{matches()}, and
\code{everything()}.
}

\section{Preconditions}{

Providing expressions as \code{preconditions} means \strong{pointblank} will preprocess
the target table table during interrogation as a preparatory step. It might
happen that a particular validation requires a calculated column, some
filtering of rows, or the addition of columns via a join, etc. Especially for
an \emph{agent}-based report this can be advantageous since we can develop a large
validation plan with a single target table and make minor adjustments to it,
as needed, along the way.

The table mutation is totally isolated in scope to the validation step(s)
where \code{preconditions} is used. Using \strong{dplyr} code is suggested here since
the statements can be translated to SQL if necessary (i.e., if the target
table resides in a database). The code is most easily supplied as a one-sided
\strong{R} formula (using a leading \code{~}). In the formula representation, the \code{.}
serves as the input data table to be transformed (e.g., \code{~ . \%>\% dplyr::mutate(col_b = col_a + 10)}). Alternatively, a function could instead
be supplied (e.g., \code{function(x) dplyr::mutate(x, col_b = col_a + 10)}).
}

\section{Actions}{

Often, we will want to specify \code{actions} for the validation. This argument,
present in every validation function, takes a specially-crafted list
object that is best produced by the \code{\link[=action_levels]{action_levels()}} function. Read that
function's documentation for the lowdown on how to create reactions to
above-threshold failure levels in validation. The basic gist is that you'll
want at least a single threshold level (specified as either the fraction of
test units failed, or, an absolute value), often using the \code{warn_at}
argument. This is especially true when \code{x} is a table object because,
otherwise, nothing happens. For the \verb{col_vals_*()}-type functions, using
\code{action_levels(warn_at = 0.25)} or \code{action_levels(stop_at = 0.25)} are good
choices depending on the situation (the first produces a warning when a
quarter of the total test units fails, the other \code{stop()}s at the same
threshold level).
}

\section{Briefs}{

Want to describe this validation step in some detail? Keep in mind that this
is only useful if \code{x} is an \emph{agent}. If that's the case, \code{brief} the agent
with some text that fits. Don't worry if you don't want to do it. The
\emph{autobrief} protocol is kicked in when \code{brief = NULL} and a simple brief will
then be automatically generated.
}

\section{YAML}{

A \strong{pointblank} agent can be written to YAML with \code{\link[=yaml_write]{yaml_write()}} and the
resulting YAML can be used to regenerate an agent (with \code{\link[=yaml_read_agent]{yaml_read_agent()}})
or interrogate the target table (via \code{\link[=yaml_agent_interrogate]{yaml_agent_interrogate()}}). When
\code{gauntlet()} is represented in YAML (under the top-level \code{steps} key as a
list member), the syntax closely follows the signature of the validation
function. Here is an example of how a complex call of \code{gauntlet()} as a
validation step is expressed in R code and in the corresponding YAML
representation.\preformatted{# R statement
agent \%>\% 
  gauntlet(
    ~ col_vals_lt(., vars(a), 8),
    ~ col_vals_gt(., vars(c), vars(a)),
    ~ col_vals_not_null(., vars(b)),
    preconditions = ~ . \%>\% dplyr::filter(a < 10),
    segments = b ~ c("group_1", "group_2"),
    actions = action_levels(warn_at = 0.1, stop_at = 0.2), 
    label = "The `gauntlet()` step.",
    active = FALSE
  )

# YAML representation
steps:
- gauntlet:
    fns:
    - ~col_vals_lt(., vars(a), 8)
    - ~col_vals_gt(., vars(c), vars(a))
    - ~col_vals_not_null(., vars(b))
    preconditions: ~. \%>\% dplyr::filter(a < 10)
    segments: b ~ c("group_1", "group_2")
    actions:
      warn_fraction: 0.1
      stop_fraction: 0.2
    label: The `gauntlet()` step.
    active: false
}

In practice, both of these will often be shorter as only the expressions for
validation steps are necessary. Arguments with default values won't be
written to YAML when using \code{\link[=yaml_write]{yaml_write()}} (though it is acceptable to include
them with their default when generating the YAML by other means). It is also
possible to preview the transformation of an agent to YAML without any
writing to disk by using the \code{\link[=yaml_agent_string]{yaml_agent_string()}} function.
}

\section{Function ID}{

2-21
}

\seealso{
Other validation functions: 
\code{\link{col_exists}()},
\code{\link{col_is_character}()},
\code{\link{col_is_date}()},
\code{\link{col_is_factor}()},
\code{\link{col_is_integer}()},
\code{\link{col_is_logical}()},
\code{\link{col_is_numeric}()},
\code{\link{col_is_posix}()},
\code{\link{col_schema_match}()},
\code{\link{col_vals_between}()},
\code{\link{col_vals_decreasing}()},
\code{\link{col_vals_equal}()},
\code{\link{col_vals_expr}()},
\code{\link{col_vals_gte}()},
\code{\link{col_vals_gt}()},
\code{\link{col_vals_in_set}()},
\code{\link{col_vals_increasing}()},
\code{\link{col_vals_lte}()},
\code{\link{col_vals_lt}()},
\code{\link{col_vals_make_set}()},
\code{\link{col_vals_make_subset}()},
\code{\link{col_vals_not_between}()},
\code{\link{col_vals_not_equal}()},
\code{\link{col_vals_not_in_set}()},
\code{\link{col_vals_not_null}()},
\code{\link{col_vals_null}()},
\code{\link{col_vals_regex}()},
\code{\link{col_vals_within_spec}()},
\code{\link{conjointly}()},
\code{\link{rows_complete}()},
\code{\link{rows_distinct}()}
}
\concept{validation functions}
